[{"title":"WebStorm快捷键总结","date":"2017-03-22T09:23:10.000Z","path":"2017/03/22/WebStorm快捷键总结/","text":"正所谓工欲善其事必先利其器，之前在WebStorm中每每遇到代码量重复的内容的时候，都要使用“CV大法”，这次特地总结了WebStorm基本的快捷键，能够让编写代码来更加得心应手。 Ctrl+Shift+a:快速查找使用编辑器所有功能 左侧栏目录显影：Ctrl+Shift+F12 文件模板配置：File》Settings》Editor&gt;File and Code Templbtessettings:Ctrl+Alt+S 将当前文件加入收藏夹：Alt+Shift+F 收藏夹显影：Alt+2 切换代码选项卡：Alt+&lt;-/-&gt; 关闭当前代码选项卡：Ctrl+F4 Ctrl+X：剪切行 快注釋：Ctrl+shift+/ 單行注釋：Ctrl+/ 複製當前行：Ctrl+D 跳到變量申明處：Ctrl+B 顯示function的詳細信息：Ctrl+Shift+i Ctrl+W:選中單詞 以單詞作為邊界跳光標位置：Ctrl+&lt;-/-&gt; 新建一個文件或其他:Alt+Insert 格式化工具：Ctrl+Alt+L（該版本不存在） 減少/擴大縮進:shift+tab/tab 刪除一行：Ctrl+Y 顯示默認值：Ctrl+p 大小寫轉換：Ctrl+shift+U 添加標籤：Ctrl+F11 重新開始一行（無論光標在哪一個位置）：shift+enter 通過文件名快速查找工程內的文件：Ctrl+Shift+N 通過一個字符快速查找位置：Ctrl+Shift+Alt+N 在文件內快速查找代碼：Ctrl+F 查找下一個：F3 查找上一個：Shift+F3 文件內代碼替換：Ctrl+R 指定目錄內代碼批量替換：Ctrl+shift+R 指定目錄內代碼批量查找：Ctrl+Shift+F 到指定行的代碼：Ctrl+G 光標到代碼塊的前面或後面：Ctrl+[/] 上一個/下一個方法：Alt+up/down 高亮显示所选文本：Ctrl+Shift+F7 打开最近打开的文件：Ctrl+E 查找代码所在的位置：Alt+F1 拷贝文件路径：Ctrl+Shift+c 撤销：Ctrl+Z 取消撤销操作：Ctrl+Shift+z 在当前行的前面插入一行：Ctrl+Alt+Enter 透明化所有窗口，快速查看桌面:Window+” “ 使当前使用的窗口最大化：Window+“向上箭头” 使当前使用中的窗口贴向屏幕左侧：Window+”向左的箭头” 跨显示器右移窗口：Windows+Shift+”向右的箭头” 突出显示当前窗口，最小化其他的非当前使用中的窗口：Windows+Home 最小化所有窗口：Windows+d html: html5结构：html:5 按下tab 引入CSS:link:css 按下tab键 引入js : script：src 按下tab键 ul及li:ul+ 按下tab键 :a:link 按下tab键 :a:mail 按下tab键 get表单：form:get 按下tab键 hidden输入框：input:hidden 按下tab键 id:name ： div#name 按下tab键 class:name : div.name 按下tab键 class:one,two : div.one.two 按下tab键 生成一个包含link的head : head&gt;link:css 两个p : p+P 3个p : p360: 创建ul下有个li同时class分别为item1,item2.。。。。:ul&gt;li.item$6 css position : pos/pos:s|a|r|f 按下tab键 top : t/t:a rigth : r/r:a left : l bottom : b z-index : z float : fl clear : cl display ：d/d:n/d:b/d:i/d:ib visibility:v71: overflow:ov72: zoom:1 : zoo73: lip : cp74: box-sizing:bx -webkit-box-shadow:0 0 0 #000 ：bxsh:w 显示当前文件的结构：Ctrl+f12 当前行向上/下移动：Ctrl+shift+”向上箭头”/“向下接口” 块移动：shift+alt+”向上箭头/向下箭头” ctrl+”+/-“:可以折叠项目中的任何代码块，它不是选中折叠，而是自动识别折叠 shift+F6:文件重命名","tags":[{"name":"技术","slug":"技术","permalink":"http://www.sugarsky.cn/tags/技术/"},{"name":"WebStorm","slug":"WebStorm","permalink":"http://www.sugarsky.cn/tags/WebStorm/"}]},{"title":"正则入门","date":"2017-03-10T09:04:40.000Z","path":"2017/03/10/正则入门/","text":"","tags":[]},{"title":"'最近的心情'","date":"2017-02-17T07:48:28.000Z","path":"2017/02/17/最近的心情/","text":"距离正月初七已经过完好久了，这个年也算过完了。心却还停留在年假期间，迟迟找不回状态。无论是编写代码，还是看书都无法静下心来认认真真的钻研进去。身边好多朋友年后换工作，现在这个时代太浮躁，笑贫不笑娼，很多人都奔着钱去。说实话，钱没有错，可是作为我自身来讲，我是觉得自己还没有足够强大到能够通过自己的能力来选择挣钱的途径。太多的人投机取巧。年前认识了一个算是影响了我的一个人，不仅分享了好多技术方面的东西，还教会了我很多为人处世方面的东西。印象深刻的两点一是要有匠人精神，做什么事，要么不做，要做就尽自己最大努力做到最好。二是她的人生座右铭不忘初心，方得始终。这两点在过年期间想了很久，在这个浮躁的时代，我们总是走着走着就忘了当初为什么上路，看见路边美丽的风景，就走岔了路，最终能走到终点的人寥寥无几。新的一年了，许多人肯定都制定了许多新年计划 。想一想前几年自己制定的计划又有多少 达成目标了呢？！！！想想真是惭愧。但既然出发了，总不能掉头。新的一年，希望自己能够沉淀下来，在羽翼没丰满的情况下充实自己，无论是技术上还是其他方面多积累。但行好事，莫问前程。就酱吧，最后放上一张乔巴。我们的目标是星辰大海！！！哈哈哈。","tags":[{"name":"关于生活","slug":"关于生活","permalink":"http://www.sugarsky.cn/tags/关于生活/"}]},{"title":"浅谈JavaScript中的预解释","date":"2017-01-21T13:52:14.000Z","path":"2017/01/21/浅谈JavaScript中的预解释/","text":"预解释什么是预解释，为何学预解释 在当前作用域下，在JS代码执行之前，浏览器会对带var和带function的进行声明或定义 带var的，只声明不定义； 带function，声明+定义； 案例分析：12345678alert(n) n=15; function fn()&#123; alert(n) n=34; &#125; fn(); alert(n); 作用域链概念：当函数被调用的时候，会形成一个私有作用域；在这个作用中查找是否有私有变量n 如果有,当前作用域下的所有n，都是私有变量，跟外界没有任何关系； 如果没有，去上级作用域进行查找，没有，继续往上找，一直找到window还没有的话，报错！ 上级作用域：上级作用域跟函数在哪里调用无关，只跟函数对应的堆内存在哪里开辟有关； 带var 和 不带var的区别： 带var的：1）会进行预解释 2）如果在全局下赋值的话，属于window的全局属性 不带var的：1）不会进行预解释 2）赋值的时候，属于window的全局属性； 内存和内存释放： 内存：栈内存和堆内存 栈内存：提供了一个供JS代码执行的环境，包含：全局作用域和私有作用域 堆内存：存放数据的； 对象数据类型：以键值对的形式存储 函数数据类型：代码字符串 内存释放： 栈内存释放： 全局作用域的释放：因为全局作用域是在浏览器加载完页面的时候形成，所以，关系页面/关闭浏览器都可以释放 私有作用域的释放：一般情况下，当函数执行完成的时候默认释放，有两种情况不释放： 不释放：当函数执行完成的时候，函数体内有东西被外面的变量或者其他东西占用； 不立即释放：当函数执行完成的时候，会返回一个还需要执行的函数，等所有函数都执行完成，就一起释放了；1234function fn()&#123; return 123&#125;fn()(); 堆内存释放：var a=xxff00; 释放：a=null; 函数被调用的时候，有四步： 形成一个私有作用域 形参赋值 预解释 代码从上到下的执行； 预解释无节操： 只对等号左边带var,声明但不定义 var aa; 已经声明过的变量，不会进行重复声明 自执行函数不会进行预解释，只有执行到他的时候，声明+定义+调用，同步完成 return后面的语句不会进行预解释，return下面的语句虽然不执行，但会进行预解释 条件判断语句中，无论条件是否成立，都会进行预解释（IE10及10以下） n++和++n的区别： （++n）先++，再运算； （n++）先运算，再++； 私有变量有两种：1）形参 2）函数中带var的； this总结： 自执行函数中的this永远都是window 当函数被调用的时候，点前面是谁，this就是谁？ 元素身上的事件被触发的时候，执行一个函数，函数中的this指向当前这个元素 构造函数中的this都是实例；","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.sugarsky.cn/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"http://www.sugarsky.cn/tags/前端/"}]},{"title":"MarkDown基本语法","date":"2017-01-21T01:42:54.000Z","path":"2017/01/21/MarkDown基本语法/","text":"编写Mark需要做的准备 打开File-settings-plugin; 打开插件进行查找 重启webstrom(必须做的) 重启webstrom之后，会在Editor-fileType-markdown 在新建的文件有两种操作： 新建一个file文件，把文件名改为/.md$/的格式；（^开头，$结尾） new-&gt;Edit File Templates,添加文件类型和后缀名，如下图标题‘#’后加空格后家的内容代表一级标题，类等于Html中的H1‘##’后加空格后家的内容代表二级标题，类等于Html中的H2‘###’后加空格后家的内容代表三级标题，类等于Html中的H3以此类推总共六级标题，注意必须在#后跟空格。列表 有序列表：直接在文字前边加上相应的顺序数字即可。注意符号和文字之间都要加上一个字符的空格： 无序列表：在文字前边加上‘-’或者‘’即可。*注意符号和文字之间都要加上一个字符的空格：引用在文本前边加上键盘中的大括号（&gt;）即可。图片和链接图片和链接的语法比较相似，但是引用图片比链接多了一个！。因为语法关系，利用图片举例。请看下图：！fileType粗体和斜体在两个‘*’中间的内容是粗体，而在一个‘’之间的内容是斜体。分割线分割线的语法只需要在内容下边加上三个‘*’即可。引入代码在代码段上一行和下一行各加上```即可。","tags":[{"name":"技术","slug":"技术","permalink":"http://www.sugarsky.cn/tags/技术/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://www.sugarsky.cn/tags/MarkDown/"}]},{"title":"git的基本使用简介","date":"2017-01-20T07:53:17.000Z","path":"2017/01/20/git的基本使用简介/","text":"自从打算开通一个github账号之后，我这个技术小白就打算从最基本的git语句来学习使用。记录如下git在命令行下的操作，方便以后查看使用。 git是否安装成功通过git –version或者git -v来查看版本号，如果能找到相关版本号说明安装成功。 git的配置12git config --global user.name \"github的用户名\"git config --global user.email \"github的邮箱\" git的工作流 先创建一个本地的git仓库： 创建一个文件夹 把这个文件夹变成一个git可以管理的仓库 git init 创建一个远程仓库：登录github的官网;右上角有个+号来创建新的仓库 给本地仓库添加一个远程通道； - 添加远程通过`git remote add 通道名称` 1git remote add origin https://github.com/leilei1238/test111111.git - 查看链接了哪些远程通`git remote -v` 把本地仓库的内容推送到远程仓库有3步： git add .; git add -A（这里只是在暂存区） git commit -m”这里是用来写注释的”（这里只是在历史区） git push origin master(把我本地仓库的内容，推送到origin这个远程仓库的master分支上去)如何更新远程仓库 找到了想要的远程仓库后，点击fork fork之后就自动到了自己的远程仓库，复制地址,使用git clone 地址 git clone https://github.com/你自己的github的用户名/XXXXXXXX.git git clone自动的让本地仓库和自己的远程仓库，添加了联系； 当别人远程仓库更新的时候，自己如果想更新自己的课件： 建立本地仓库跟别人远程仓库的联系：例：git remote add teacher https://github.com/zhufengpeixun/Javascript201616.git 远程更新：git remote update teacher down到本地：git pull teacher master 常用的命令 git是否安装成功 git –version 添加远程仓库 git remote add 通道名称（origin:自己远程 xxxx:别人远程） 查看本地连接了哪些远程 git remote -v 删除远程通道： git remote rm 通道名称 把本地仓库内容推送到自己远程仓库 git add . git commit -m”注释” git push origin master ls 查看当前文件夹下有哪些子文件；（有的电脑是dir） cd 文件夹名:进入某个文件夹 创建一个文件夹：mkdir 文件夹名字 创建多个文件：touch app.js index.html 进入文件夹并创建文件可以合并：cd leilei &amp;&amp; touch app.js index.html; 返回上一次 cd .. 返回根目录 cd/ git配置： git config --global user.name &quot;github的用户名&quot; git config --global user.email &quot;github的邮箱&quot;","tags":[{"name":"技术","slug":"技术","permalink":"http://www.sugarsky.cn/tags/技术/"},{"name":"Git","slug":"Git","permalink":"http://www.sugarsky.cn/tags/Git/"}]},{"title":"开心，哈哈哈哈哈","date":"2017-01-20T06:32:40.000Z","path":"2017/01/20/开心，哈哈哈哈哈/","text":"自己研究了一上午，又是百度又是大眼瞪小眼的瞎折腾，终于把自己申请的域名和利用hexo和github搭建的博客绑定在了一起。都说自己上了大学以后一直都是在听别人说编程的乐趣在于你自己编写的程序成功运行的一刹那是最开心的。今天终于体验到了这种感觉，很开心，哈哈哈。","tags":[{"name":"关于生活","slug":"关于生活","permalink":"http://www.sugarsky.cn/tags/关于生活/"}]},{"title":"不开心","date":"2017-01-19T04:41:12.000Z","path":"2017/01/19/不开心/","text":"删除的东西删除不下去，不开心！！！","tags":[{"name":"关于生活","slug":"关于生活","permalink":"http://www.sugarsky.cn/tags/关于生活/"}]},{"title":"用Hexo+Github搭建博客","date":"2017-01-19T02:17:06.000Z","path":"2017/01/19/用Hexo-Github搭建博客/","text":"用Hexo和GitHub搭建一个博客 npm install hexo -g 你猜呢 测试用的，哈哈哈哈哈","tags":[{"name":"技术","slug":"技术","permalink":"http://www.sugarsky.cn/tags/技术/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.sugarsky.cn/tags/JavaScript/"}]}]